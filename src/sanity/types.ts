/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type VerticalAlign = 'top' | 'center' | 'bottom';

export type SiteColorsSelector =
  | 'white'
  | 'primary'
  | 'secondary'
  | 'tertiary'
  | 'accent'
  | 'highlight'
  | 'black';

export type SecondLevelLinks = {
  _type: 'secondLevelLinks';
  secondLevelLink: BasicLink;
  thirdLevelLinks?: Array<
    {
      _key: string;
    } & BasicLink
  >;
};

export type LinkWithIcon = {
  _type: 'linkWithIcon';
  icon: string;
  link: BasicLink;
};

export type ImageTextBlock = {
  _type: 'imageTextBlock';
  image: RichImage;
  text: TextBlock;
  imageAlignment?: 'left' | 'right';
};

export type TextBlock = {
  _type: 'textBlock';
  title?: string;
  subtitle?: string;
  body?: string;
  alignment?: 'left' | 'center' | 'right';
};

export type HorizontalAlign = 'left' | 'center' | 'right';

export type HeroBlock = {
  _type: 'heroBlock';
  image: RichImage;
  isFullWidth?: boolean;
  bgColor?: SiteColorsSelector;
  title?: string;
  subtitle?: string;
  textColor?: SiteColorsSelector;
  showTextOutline?: boolean;
  textOutlineColor?: SiteColorsSelector;
  textOutlineSize?: 'sm' | 'md' | 'lg';
  ctaButton?: CtaButton;
  textAlignment?: HorizontalAlign;
  textBlockAlignment?: ContentAlign;
  overlay?: {
    coverage?: 'none' | 'fullImage' | 'textOnly';
    color?: SiteColorsSelector;
    opacity?: 0 | 10 | 20 | 30 | 40 | 50 | 60 | 70 | 80 | 90 | 100;
  };
};

export type RichImage = {
  _type: 'richImage';
  imageAsset: CloudinaryAsset;
  altText?: string;
};

export type Font = 'serif' | 'sans-serif' | 'mono';

export type CtaButton = {
  _type: 'ctaButton';
  link?: BasicLink;
  isDark?: boolean;
};

export type ContentBlocks = Array<
  | ({
      _key: string;
    } & HeroBlock)
  | ({
      _key: string;
    } & TextBlock)
  | ({
      _key: string;
    } & CarouselBlock)
  | ({
      _key: string;
    } & ImageTextBlock)
>;

export type ContentAlign = {
  _type: 'contentAlign';
  horizontalAlign?: 'left' | 'center' | 'right';
  verticalAlign?: 'top' | 'center' | 'bottom';
};

export type CarouselBlock = {
  _type: 'carouselBlock';
  images: Array<
    {
      _key: string;
    } & RichImage
  >;
  direction?: 'horizontal' | 'vertical';
};

export type NavTab = {
  _type: 'navTab';
  link?: BasicLink;
  secondLevelLinks?: Array<
    {
      _key: string;
    } & SecondLevelLinks
  >;
};

export type BasicLink = {
  _type: 'basicLink';
  internalLink?: {
    linkText: string;
    slug: Slug;
  };
  externalLink?: {
    linkText: string;
    url: string;
  };
};

export type SiteSettings = {
  _id: string;
  _type: 'siteSettings';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  mainNav?: MainNav;
  footer?: Footer;
  seo: Seo;
};

export type Footer = {
  _type: 'footer';
  legalLinks?: Array<
    {
      _key: string;
    } & BasicLink
  >;
  siteLinks?: Array<
    {
      _key: string;
    } & BasicLink
  >;
  socialLinks?: Array<
    {
      _key: string;
    } & LinkWithIcon
  >;
  copyrightText?: string;
};

export type MainNav = {
  _type: 'mainNav';
  companyLogo?: string;
  navTabs?: Array<
    {
      _key: string;
    } & NavTab
  >;
};

export type ProductVariant = {
  _id: string;
  _type: 'productVariant';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  variantTitle?: string;
  variantSlug?: Slug;
  price?: number;
  variantImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
};

export type ParentProduct = {
  _id: string;
  _type: 'parentProduct';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  sku: number;
  productTitle: string;
  productSlug: Slug;
  price: number;
  productImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  productVariants?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'productVariant';
  }>;
};

export type Homepage = {
  _id: string;
  _type: 'homepage';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  contentBlocks?: ContentBlocks;
  seo?: Seo;
};

export type Seo = {
  _type: 'seo';
  metaTitle?: string;
  metaDescription?: string;
  metaKeywords?: Array<string>;
};

export type CloudinaryAssetContextCustom = {
  _type: 'cloudinary.assetContextCustom';
  alt?: string;
  caption?: string;
};

export type CloudinaryAssetDerived = {
  _type: 'cloudinary.assetDerived';
  raw_transformation?: string;
  url?: string;
  secure_url?: string;
};

export type CloudinaryAsset = {
  _type: 'cloudinary.asset';
  public_id?: string;
  resource_type?: string;
  type?: string;
  format?: string;
  version?: number;
  url?: string;
  secure_url?: string;
  width?: number;
  height?: number;
  bytes?: number;
  duration?: number;
  tags?: Array<string>;
  created_at?: string;
  derived?: Array<
    {
      _key: string;
    } & CloudinaryAssetDerived
  >;
  access_mode?: string;
  context?: CloudinaryAssetContext;
};

export type CloudinaryAssetContext = {
  _type: 'cloudinary.assetContext';
  custom?: CloudinaryAssetContextCustom;
};

export type InlineSvg = string;

export type Color = {
  _type: 'color';
  hex?: string;
  alpha?: number;
  hsl?: HslaColor;
  hsv?: HsvaColor;
  rgb?: RgbaColor;
};

export type RgbaColor = {
  _type: 'rgbaColor';
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type HsvaColor = {
  _type: 'hsvaColor';
  h?: number;
  s?: number;
  v?: number;
  a?: number;
};

export type HslaColor = {
  _type: 'hslaColor';
  h?: number;
  s?: number;
  l?: number;
  a?: number;
};

export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: 'slug';
  current: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes =
  | VerticalAlign
  | SiteColorsSelector
  | SecondLevelLinks
  | LinkWithIcon
  | ImageTextBlock
  | TextBlock
  | HorizontalAlign
  | HeroBlock
  | RichImage
  | Font
  | CtaButton
  | ContentBlocks
  | ContentAlign
  | CarouselBlock
  | NavTab
  | BasicLink
  | SiteSettings
  | Footer
  | MainNav
  | ProductVariant
  | ParentProduct
  | Homepage
  | Seo
  | CloudinaryAssetContextCustom
  | CloudinaryAssetDerived
  | CloudinaryAsset
  | CloudinaryAssetContext
  | InlineSvg
  | Color
  | RgbaColor
  | HsvaColor
  | HslaColor
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: src/lib/groqQueries/queries/homepage.ts
// Variable: HOMEPAGE_QUERY
// Query: *[_type == "homepage"][0]{  ...,  _type,  contentBlocks[]{      _key,  _type == "heroBlock" => {    _type,      _type,  image{      _key,  imageAsset{    _type,    _key,    _version,    public_id,    resource_type,    secure_url,    width,    height,    duration,    tags  },  altText  },  isFullWidth,  bgColor,  title,  subtitle,  textColor,  showTextOutline,  textOutlineColor,  textOutlineSize,  ctaButton{      link{    internalLink{      _type,      linkText,      slug{        current      }    },    externalLink{      _type,      linkText,      url    }  },  isDark  },  textAlignment,  textBlockAlignment{      horizontalAlign,  verticalAlign  },  overlay{    coverage,    color,    opacity  }  },  _type == "textBlock" => {    _type,      _type,  title,  subtitle,  body,  alignment  },  _type == "imageTextBlock" => {    _type,      _type,  image{      _key,  imageAsset{    _type,    _key,    _version,    public_id,    resource_type,    secure_url,    width,    height,    duration,    tags  },  altText  },  text{      _type,  title,  subtitle,  body,  alignment  },  imageAlignment  },  _type == "carouselBlock" => {    _type,      _type,  images[]{      _key,  imageAsset{    _type,    _key,    _version,    public_id,    resource_type,    secure_url,    width,    height,    duration,    tags  },  altText  },  direction  }  },    metaTitle,  metaDescription,  metaKeywords[]}
export type HOMEPAGE_QUERYResult = {
  _id: string;
  _type: 'homepage';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  contentBlocks: Array<
    | {
        _key: string;
        _type: 'carouselBlock';
        images: Array<{
          _key: string;
          imageAsset: {
            _type: 'cloudinary.asset';
            _key: null;
            _version: null;
            public_id: string | null;
            resource_type: string | null;
            secure_url: string | null;
            width: number | null;
            height: number | null;
            duration: number | null;
            tags: Array<string> | null;
          };
          altText: string | null;
        }>;
        direction: 'horizontal' | 'vertical' | null;
      }
    | {
        _key: string;
        _type: 'heroBlock';
        image: {
          _key: null;
          imageAsset: {
            _type: 'cloudinary.asset';
            _key: null;
            _version: null;
            public_id: string | null;
            resource_type: string | null;
            secure_url: string | null;
            width: number | null;
            height: number | null;
            duration: number | null;
            tags: Array<string> | null;
          };
          altText: string | null;
        };
        isFullWidth: boolean | null;
        bgColor: SiteColorsSelector | null;
        title: string | null;
        subtitle: string | null;
        textColor: SiteColorsSelector | null;
        showTextOutline: boolean | null;
        textOutlineColor: SiteColorsSelector | null;
        textOutlineSize: 'lg' | 'md' | 'sm' | null;
        ctaButton: {
          link: {
            internalLink: {
              _type: null;
              linkText: string;
              slug: {
                current: string;
              };
            } | null;
            externalLink: {
              _type: null;
              linkText: string;
              url: string;
            } | null;
          } | null;
          isDark: boolean | null;
        } | null;
        textAlignment: HorizontalAlign | null;
        textBlockAlignment: {
          horizontalAlign: 'center' | 'left' | 'right' | null;
          verticalAlign: 'bottom' | 'center' | 'top' | null;
        } | null;
        overlay: {
          coverage: 'fullImage' | 'none' | 'textOnly' | null;
          color: SiteColorsSelector | null;
          opacity: 0 | 10 | 100 | 20 | 30 | 40 | 50 | 60 | 70 | 80 | 90 | null;
        } | null;
      }
    | {
        _key: string;
        _type: 'imageTextBlock';
        image: {
          _key: null;
          imageAsset: {
            _type: 'cloudinary.asset';
            _key: null;
            _version: null;
            public_id: string | null;
            resource_type: string | null;
            secure_url: string | null;
            width: number | null;
            height: number | null;
            duration: number | null;
            tags: Array<string> | null;
          };
          altText: string | null;
        };
        text: {
          _type: 'textBlock';
          title: string | null;
          subtitle: string | null;
          body: string | null;
          alignment: 'center' | 'left' | 'right' | null;
        };
        imageAlignment: 'left' | 'right' | null;
      }
    | {
        _key: string;
        _type: 'textBlock';
        title: string | null;
        subtitle: string | null;
        body: string | null;
        alignment: 'center' | 'left' | 'right' | null;
      }
  > | null;
  seo?: Seo;
  metaTitle: null;
  metaDescription: null;
  metaKeywords: null;
} | null;

// Source: src/lib/groqQueries/queries/siteSettings.ts
// Variable: SITE_SETTINGS_QUERY
// Query: *[_type == "siteSettings"][0]{  mainNav{    _type,    companyLogo,    navTabs[]{      _key,      link{          internalLink{    linkText,    slug  }      },      secondLevelLinks[]{        _type,        _key,        secondLevelLink{            internalLink{    linkText,    slug  }        },        thirdLevelLinks[]{          _key,            internalLink{    linkText,    slug  }        }      }    }  },  footer{    _type,    legalLinks[]{      _key,        internalLink{    linkText,    slug  }    },    siteLinks[]{      _key,        internalLink{    linkText,    slug  }    },    socialLinks[]{      _key,      icon,      link{        externalLink{          url,          linkText        }      }    },    copyrightText  }}
export type SITE_SETTINGS_QUERYResult = {
  mainNav: {
    _type: 'mainNav';
    companyLogo: string | null;
    navTabs: Array<{
      _key: string;
      link: {
        internalLink: {
          linkText: string;
          slug: Slug;
        } | null;
      } | null;
      secondLevelLinks: Array<{
        _type: 'secondLevelLinks';
        _key: string;
        secondLevelLink: {
          internalLink: {
            linkText: string;
            slug: Slug;
          } | null;
        };
        thirdLevelLinks: Array<{
          _key: string;
          internalLink: {
            linkText: string;
            slug: Slug;
          } | null;
        }> | null;
      }> | null;
    }> | null;
  } | null;
  footer: {
    _type: 'footer';
    legalLinks: Array<{
      _key: string;
      internalLink: {
        linkText: string;
        slug: Slug;
      } | null;
    }> | null;
    siteLinks: Array<{
      _key: string;
      internalLink: {
        linkText: string;
        slug: Slug;
      } | null;
    }> | null;
    socialLinks: Array<{
      _key: string;
      icon: string;
      link: {
        externalLink: {
          url: string;
          linkText: string;
        } | null;
      };
    }> | null;
    copyrightText: string | null;
  } | null;
} | null;
// Variable: SITEWIDE_METADATA_QUERY
// Query: *[_type == "siteSettings"][0]{  seo{    metaTitle,    metaDescription,    metaKeywords[]  }}
export type SITEWIDE_METADATA_QUERYResult = {
  seo: {
    metaTitle: string | null;
    metaDescription: string | null;
    metaKeywords: Array<string> | null;
  };
} | null;

// Query TypeMap
import '@sanity/client';
declare module '@sanity/client' {
  interface SanityQueries {
    '*[_type == "homepage"][0]{\n  ...,\n  _type,\n  contentBlocks[]{\n    \n  _key,\n  _type == "heroBlock" => {\n    _type,\n    \n  _type,\n  image{\n    \n  _key,\n  imageAsset{\n    _type,\n    _key,\n    _version,\n    public_id,\n    resource_type,\n    secure_url,\n    width,\n    height,\n    duration,\n    tags\n  },\n  altText\n\n  },\n  isFullWidth,\n  bgColor,\n  title,\n  subtitle,\n  textColor,\n  showTextOutline,\n  textOutlineColor,\n  textOutlineSize,\n  ctaButton{\n    \n  link{\n    internalLink{\n      _type,\n      linkText,\n      slug{\n        current\n      }\n    },\n    externalLink{\n      _type,\n      linkText,\n      url\n    }\n  },\n  isDark\n\n  },\n  textAlignment,\n  textBlockAlignment{\n    \n  horizontalAlign,\n  verticalAlign\n\n  },\n  overlay{\n    coverage,\n    color,\n    opacity\n  }\n\n  },\n  _type == "textBlock" => {\n    _type,\n    \n  _type,\n  title,\n  subtitle,\n  body,\n  alignment\n\n  },\n  _type == "imageTextBlock" => {\n    _type,\n    \n  _type,\n  image{\n    \n  _key,\n  imageAsset{\n    _type,\n    _key,\n    _version,\n    public_id,\n    resource_type,\n    secure_url,\n    width,\n    height,\n    duration,\n    tags\n  },\n  altText\n\n  },\n  text{\n    \n  _type,\n  title,\n  subtitle,\n  body,\n  alignment\n\n  },\n  imageAlignment\n\n  },\n  _type == "carouselBlock" => {\n    _type,\n    \n  _type,\n  images[]{\n    \n  _key,\n  imageAsset{\n    _type,\n    _key,\n    _version,\n    public_id,\n    resource_type,\n    secure_url,\n    width,\n    height,\n    duration,\n    tags\n  },\n  altText\n\n  },\n  direction\n\n  }\n\n  },\n  \n  metaTitle,\n  metaDescription,\n  metaKeywords[]\n\n}': HOMEPAGE_QUERYResult;
    '*[_type == "siteSettings"][0]{\n  mainNav{\n    _type,\n    companyLogo,\n    navTabs[]{\n      _key,\n      link{\n        \n  internalLink{\n    linkText,\n    slug\n  }\n\n      },\n      secondLevelLinks[]{\n        _type,\n        _key,\n        secondLevelLink{\n          \n  internalLink{\n    linkText,\n    slug\n  }\n\n        },\n        thirdLevelLinks[]{\n          _key,\n          \n  internalLink{\n    linkText,\n    slug\n  }\n\n        }\n      }\n    }\n  },\n  footer{\n    _type,\n    legalLinks[]{\n      _key,\n      \n  internalLink{\n    linkText,\n    slug\n  }\n\n    },\n    siteLinks[]{\n      _key,\n      \n  internalLink{\n    linkText,\n    slug\n  }\n\n    },\n    socialLinks[]{\n      _key,\n      icon,\n      link{\n        externalLink{\n          url,\n          linkText\n        }\n      }\n    },\n    copyrightText\n  }\n}': SITE_SETTINGS_QUERYResult;
    '*[_type == "siteSettings"][0]{\n  seo{\n    metaTitle,\n    metaDescription,\n    metaKeywords[]\n  }\n}': SITEWIDE_METADATA_QUERYResult;
  }
}
